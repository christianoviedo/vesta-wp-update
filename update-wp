#!/bin/bash

# Verificar espacio libre antes de continuar (mínimo 5% libre o 1 GB)
MIN_FREE_MB=1024

AVAILABLE_MB=$(df / | awk 'NR==2 {print $4}')
AVAILABLE_PCT=$(df / | awk 'NR==2 {print $5}' | tr -d '%')

if [ "$AVAILABLE_MB" -lt "$MIN_FREE_MB" ]; then
    echo "[ERROR] Espacio en disco insuficiente: solo $AVAILABLE_MB KB disponibles" >> /var/log/update_wp.log
    exit 1
fi

if [ "$AVAILABLE_PCT" -ge 95 ]; then
    echo "[ERROR] Espacio en disco crítico: uso de $AVAILABLE_PCT%" >> /var/log/update_wp.log
    exit 1
fi

BASE_DIR='/home/'
EXCLUDE_USERS=('admin')
EXCLUDE_DOMAINS=('midominio.com')
LOGFILE='/var/log/update_wp.log'
LOGDIR='/var/log/update_wp'

# Detectar si es VestaCP
is_vestacp() {
    [ -d /usr/local/vesta ] || [ -f /usr/local/vesta/conf/vesta.conf ]
}

# Función principal que realiza la actualizaci??n de WordPress por sitio
function main_prog() {    
        while read output;
        do            
                # Separa la ruta para extraer el nombre del usuario y dominio
                IFS="/" read -ra PARTS <<< $output
                USER="${PARTS[2]}"

                # Asignación de DOMAIN según tipo de servidor
                if is_vestacp; then
                        DOMAIN="${PARTS[4]}"
                else # Laravel Forge
                        DOMAIN="${PARTS[3]}"
                fi

                # Ruta base del sitio WordPress
                WP_PATH="${output::-23}" 

                # vemos que no esté en las cuentas excluidas
                if [[ ! " ${EXCLUDE_USERS[*]} " =~ " ${USER} " ]]; then
                        echo "Actualizando Wordpress de usuario: ${USER} - ${DOMAIN}" >> $LOGFILE
                        cd ${WP_PATH}

                        # Rutas de respaldo temporal
                        BACKUP_WPCONFIG="$WP_PATH/wp-config.php.bak"
                        BACKUP_HTACCESS="$WP_PATH/.htaccess.bak"

                        # Respaldar archivos si existen
                        [ -f wp-config.php ] && cp -p wp-config.php "$BACKUP_WPCONFIG"
                        [ -f .htaccess ] && cp -p .htaccess "$BACKUP_HTACCESS"

                        cat >> "$LOGDIR/${USER}-${DOMAIN}.log" << EOF
===============================
`date`
-------------------------------
EOF

                        # Ejecuta las actualizaciones como el usuario dueño del sitio
                        sudo -H -u "$USER" bash -c '
                                wp core update
                                wp plugin update --all
                                wp plugin install wordfence --activate
                                wp plugin deactivate wp-security-hardening
                                wp theme delete twentyfourteen twentysixteen twentyseventeen twentynineteen twentytwenty twentytwentyone twentytwentytwo twentytwentythree twentytwentyfour
                        ' >> $LOGDIR/${USER}-${DOMAIN}.log 2>&1

                        # Restaurar wp-config.php y .htaccess desde los respaldos si existen
                        [ -f "$BACKUP_WPCONFIG" ] && mv -f "$BACKUP_WPCONFIG" wp-config.php
                        [ -f "$BACKUP_HTACCESS" ] && mv -f "$BACKUP_HTACCESS" .htaccess

                        # Asegurar propiedad del usuario
                        chown "$USER:$USER" wp-config.php .htaccess 2>/dev/null

                        # limpiamos los archivos descargados
                        sudo -H -u "$USER" bash -c 'wp cli cache clear' >> "$LOGDIR/${USER}-${DOMAIN}.log" 2>&1
                fi                                                         
        done                             
}                                                                                              

# Crear directorio de logs si no existe
[ -d $LOGDIR ] || mkdir -p $LOGDIR

# Buscar todos los archivos version.php dentro de wp-includes para detectar instalaciones de WordPress
# y pasar la lista a la función principal
find $BASE_DIR -name 'version.php' -path '*wp-includes/*' -print | main_prog
